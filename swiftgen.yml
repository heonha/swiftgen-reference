## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## In case your config entries all use a common input/output parent directory, you can specify those here.
##   Every input/output paths in the rest of the config will then be expressed relative to these.
##   Those two top-level keys are optional and default to "." (the directory of the config file).
# input_dir: MyLib/Sources/
# output_dir: MyLib/Generated/


## Generate constants for your localized strings.
##   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
##   SwiftGen will parse all `.strings` files found in that folder.
## 현지화된 문자열에 대한 상수를 생성합니다.
## SwiftGen이 하나의 로케일(일반적으로 Base.lproj 또는 en.lproj 또는 개발 지역)만 구문 분석하는지 확인하십시오. 그렇지 않으면 동일한 키를 여러 번 생성합니다.
## SwiftGen은 해당 폴더에서 발견된 모든 `.strings` 파일을 구문 분석합니다.

## 구문 분석하는 config 부분.(현지화)
strings:
  inputs:
    - swiftgen-samples/Localizable.strings
  outputs:
    - templateName: structured-swift5
      output: swiftgen-samples/Strings+Generated.swift
      params:
        enumName: S


## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customize the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
## 이미지, 색상, ARKit 리소스 등에 대한 상수를 포함하여 자산 카탈로그에 대한 상수를 생성합니다.
## 이 예제는 템플릿에 추가 매개변수를 제공하여 출력을 사용자 지정하는 방법도 보여줍니다.
## - 특히 `forceProvidesNamespaces: true` 매개변수는 "네임스페이스 제공"이 없는 경우에도 자산 카탈로그에서 사용되는 각 폴더/그룹에 대한 하위 네임스페이스를 강제로 생성합니다. 이 매개변수가 없으면 SwiftGen은 Inspector 창에서 "네임스페이스 제공" 상자가 선택된 폴더/그룹에 대한 하위 네임스페이스만 생성합니다.
## - 템플릿에 지원되는 매개변수를 확인하려면 `swiftgen 템플릿 doc xcassets swift5`를 사용하여 GitHub에서 템플릿 문서를 엽니다.
# xcassets:
#   inputs:
#     - Main.xcassets
#     - ProFeatures.xcassets
#   outputs:
#     - templateName: swift5
#       params:
#         forceProvidesNamespaces: true
#       output: XCAssets+Generated.swift

## Assets 안전하게 참조하는 부분.
xcassets:
   inputs:
     - swiftgen-samples/Assets.xcassets
   outputs:
     - templateName: swift5
       params:
         forceProvidesNamespaces: true
       output: swiftgen-samples/XCAssets+Generated.swift
       params:
         enumName: I

## Generate constants for your storyboards and XIBs.
##   This one generates 2 output files, one containing the storyboard scenes, and another for the segues.
##    (You can remove the segues entry if you don't use segues in your IB files).
##   For `inputs` we can use "." here (aka "current directory", at least relative to `input_dir` = "MyLib/Sources"),
##    and SwiftGen will recursively find all `*.storyboard` and `*.xib` files in there.
# ib:
#   inputs:
#     - .
#   outputs:
#     - templateName: scenes-swift5
#       output: IB-Scenes+Generated.swift
#     - templateName: segues-swift5
#       output: IB-Segues+Generated.swift


## There are other parsers available for you to use depending on your needs, for example:
##  - `fonts` (if you have custom ttf/ttc font files)
##  - `coredata` (for CoreData models)
##  - `json`, `yaml` and `plist` (to parse custom JSON/YAML/Plist files and generate code from their content)
## …
##
## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.6.2/Documentation/
